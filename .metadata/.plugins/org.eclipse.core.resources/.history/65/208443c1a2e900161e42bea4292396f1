/**
 * @file        
 *
 * @date        
 * @author      Manuel Del Basso (mainster)
 * @email       manuel.delbasso@gmail.com
 *
 * @ide         System Workbench ac6 (eclipse stm32)
 * @stdperiph   STM32F4xx Standard peripheral drivers version 1.4.0 or greater required
 * @license     GNU GPL v3
 * 
 * @brief       Provides initialization methods to configure analog subsystems and DMA controller. 
 * 
   @verbatim

    Copyright (C) 2016  Manuel Del Basso
    
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    @endverbatim
 *
 */
#ifndef _PERIPH2DMA_INIT_H_
#define _PERIPH2DMA_INIT_H_


/**
 * @brief      { function_description }
 *
 * @param[in]  TimerRun   The timer run
 * @param[in]  IntOn      The int on
 * @param[in]  peri       The peri
 */
void TIM2_DMA_Trigger_Config (FunctionalState TimerRun,
                              FunctionalState IntOn, uint16_t peri);

/**
 * @brief      { function_description }
 *
 * @param[in]  int16_t   The int 16 t
 * @param[in]  memSize   This is an integer value, the DMA controller transfers
 *                       memSize datagrams befor circulating. Also memSize ADC
 *                       regular channels have to be configured within this init
 *                       procedure (ADC_RegularChannelConfig)
 */
void DMA_Config ( __IO int16_t *MultiConvBuff, uint8_t memSize);
void AN_Watchdog_Config (void);

/**
 * @brief      ADC common and regular scan group init
 */
void ADC_Scan_Group_Config (void);
void RCC_Configuration (void);
void ADC_DMA_DualModeConfig (__IO int16_t *MultiConvBuff);
void ADC_ContScanMode_w_DMA  (__IO int16_t *MultiConvBuff);
void ADC_ContScanMode_w_DMA_timeTrigd  (__IO int16_t *MultiConvBuff, uint8_t memSize);
void DAC_SetSignedValue (MD_DAC_Channel_t DACx, int16_t val);


#endif