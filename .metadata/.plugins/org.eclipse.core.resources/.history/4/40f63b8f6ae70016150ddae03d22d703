/**
 * @file        console.h
 *
 * @date        29 Jan 2017
 * @author      Manuel Del Basso (mainster)
 * @email       manuel.delbasso@gmail.com
 *
 * @ide         System Workbench ac6 (eclipse stm32)
 * @stdperiph   STM32F4xx Standard peripheral drivers version 1.4.0 or greater required
 * @license		GNU GPL v3
 * 
 * @brief       TODO
 * 
 * @verbatim

	Copyright (C) 2016	Manuel Del Basso
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.

	@endverbatim
 *
 */
#ifndef CONSOLE_H_
#define CONSOLE_H_

#include "arm_math.h"
#include "defines.h"
#include "tm_stm32f4_usart.h"

/**
 * @addtogroup MD_APP
 * @{
 */

/**
 * @addtogroup APP_Console
 * @{
 */

/**
 * @addtogroup Console_Macros
 * @{
 */

// ==============================================================
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// ==============================================================
//      This indices HAVE TO STAY IN SYNC WITH Qt GUI SOURCES
// ==============================================================
volatile int NC = 3;		// index 0...2  (short command)
volatile int FS = 2;		// index 3...4	(fieldsep)
volatile int NV = 10;	    // index 5...14 (value)
// ==============================================================
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// ==============================================================

#define IDX_CMD     1       // index 0 is @ or ! or #
#define IDX_VAL     5   // index 5

#define UART_BUFF_SIZE      (1+NC+FS+NV+1)
#define VALUE_BUFF_SIZE     (NV+1)
#define CMD_BUFF_SIZE       (NC+1)

/** @} */

/**
 * @addtogroup Console_Typedefs
 * @{
 */


typedef enum {
    KP, KI, KD, W, UNKNOWN
} CmdItem_t;      //!< Enumeration for switch-by-string casees

//Struct for switch by string casees
struct items {
    char *name;
    CmdItem_t id;
};

/**
 * @brief      { item_description }
 */
// typedef enum {
//     _FLOAT_,
//     _INT_,
//     _UINT_
// } PidStructType_t;



// ==============================================================
//            wave command items struct
// ==============================================================
typedef enum {                            //!< Enumeration for switch-by-string casees
    NN,                                         //!< unknown wave form received
    EN,                                         //!< Generator enable
    DIS,                                        //!< Generator disable
    COS, TRIANG, SQUAREWAV,             //!< Usable waveforms

    /**
     * @brief      Quadratic: Testsignal zum vergleich.
     *
     *             Testsignal zum vergleich mit Üersichtsblatt
     *             "Was für Regler notwendig um quadratischen sollwertverl...".
     *             (siehe Vorlesung HsKA, RT2, H. Brunner)
     */
    QUADRATIC, I_QUADRATIC, SAWTOOTH,
    CMD_REMOTE_SETPOINT,
    CMD_OPENLOOP_REMOTE,
    CMD_ANALOG_SETPOINT,
    CMD_INTERNAL_SETPOINT,
    CMD_REFRESH_RATE,
    CMD_TESTVECT,

    /**
     * @brief      { item_description }CMD_MATLAB_LINK
     *
     * \# c c c : = F F F F  d  d  A ..16x.. A
     * \#mat:=25~~0~
     *
     */
    CMD_MATLAB_LINK
} WavItems_t;


/**
 * @brief      Lookup table to provide switch-by-string functionality.
 *
 *             Structure holds a string and id value to provide simple
 *             switch-by-string functionality
 */
typedef struct {
    char *name;
    WavItems_t idw;
} itemsw_t;


/**
 * @brief      MISC command items enumerations for switch-by-string identifiers.
 */
typedef enum {
    misc_NN,
    misc_none,
    misc_pid_init,
    misc_pid_Controller,
    misc_pid_Reset_Integrator,
    misc_update_pid_data,
    misc_assOnOff_cmd,          //!< AutoSafetyShutdown Enable/Disable cmd
    misc_assUpperLim_cmd,       //!< AutoSafetyShutdown set Upper Limit command
    misc_assLowerLim_cmd,       //!< AutoSafetyShutdown set Lower Limit command
    misc_assTrippTime_cmd,      //!< AutoSafetyShutdown set Tripping time command
    misc_assSaveVal_cmd,        //!< AutoSafetyShutdown set Safe value command
    misc_beamOn_cmd,            //!< Beam enable disable command enumeration
    misc_beamOff_cmd,           //!< Beam enable disable command enumeration
} MiscItem_t;

/**
 * @brief      Miscellaneous (Misc) command structure typedef.
 */
typedef struct {
    char *name;
    MiscItem_t idm;
} MiscCmds_t;

/* ================================================================================ */
typedef struct {
    int16_t lowerLim;
    int16_t upperLim;
} DacLimit_t;

/* ================================================================================ */
////!< typedef for different setpoint source select
//typedef enum {
//    INTERNAL_SETPOINT,          //!< Setpoint signal generated by software...
//    ANALOG_SETPOINT,            //!< Setpoint by analog waveform, converted by I_L adc line yet
//    REMOTE_SETPOINT,            //!< Setpoint commands/Signal over serial interface, NO internal setpoint sources
//    REMOTE_OPENLOOP,            //!< No active PID - Feed remote setpoint to hardware
//    REMOTE_INTERNAL_MIXED       //!< Iternal setpoint + remote setpoint
//} SetPointSrc_t;
//!< typedef for different setpoint source select


typedef enum {
    INTERNAL_SETPOINT,          //!< Setpoint signal generated by software...
    ANALOG_SETPOINT,            //!< Setpoint by analog waveform, converted by I_L adc line yet
    REMOTE_SETPOINT,            //!< Setpoint commands/Signal over serial interface, NO internal setpoint sources
    REMOTE_OPENLOOP,            //!< No active PID - Feed remote setpoint to hardware
    REMOTE_INTERNAL_MIXED       //!< Iternal setpoint + remote setpoint
} SetPointSrc_t;

/** @} */

/**
 * @addtogroup Console_Variables
 * @{
 */

/**
 * @addtogroup Console_Functions
 * @{
 */

//void fastConsoleCase (volatile struct PID_DATA *pid) {
#if  defined (KEIL_IDE)
#pragma O0
#elif  defined (__GNUC__)
#pragma GCC push_options
#pragma GCC optimize ("O0")
#endif

/**
 * @brief      Fast console command parser.
 *
 *             Interface to a signal generator based on lookup tables.
 *             Implemented waveforms:	- Śin/Cos
 *
 * @param      pid   Pointer to a pid instance from dsp library.  
 */
void fastConsoleCase (arm_pid_instance_f32 *pid);

#if  defined (KEIL_IDE)
#pragma O2
#elif  defined (__GNUC__)
#pragma GCC pop_options
#endif




/** @} */

/** @} */

/** @} */

/** @} */




#endif /* CONSOLE_H_ */
